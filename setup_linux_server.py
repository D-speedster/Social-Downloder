#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
اسکریپت راه‌اندازی برای محیط سرور لینوکس
تنظیم DNS و شبکه برای حل مشکلات دانلود یوتیوب
"""

import os
import sys
import socket
import subprocess
import platform
from pathlib import Path

class LinuxServerSetup:
    def __init__(self):
        self.is_linux = platform.system().lower() == 'linux'
        self.dns_servers = [
            '8.8.8.8',      # Google DNS
            '8.8.4.4',      # Google DNS Secondary
            '1.1.1.1',      # Cloudflare DNS
            '1.0.0.1',      # Cloudflare DNS Secondary
            '208.67.222.222', # OpenDNS
            '208.67.220.220'  # OpenDNS Secondary
        ]
    
    def check_system(self):
        """بررسی سیستم عامل"""
        print(f"سیستم عامل: {platform.system()}")
        print(f"نسخه: {platform.release()}")
        print(f"معماری: {platform.machine()}")
        
        if not self.is_linux:
            print("⚠️ این اسکریپت برای سیستم‌های لینوکس طراحی شده است")
            return False
        
        return True
    
    def test_dns_servers(self):
        """تست DNS serverها"""
        print("\n--- تست DNS Servers ---")
        working_dns = []
        
        for dns in self.dns_servers:
            try:
                # تست DNS با nslookup
                result = subprocess.run(
                    ['nslookup', 'youtube.com', dns],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0:
                    print(f"✅ DNS {dns}: کار می‌کند")
                    working_dns.append(dns)
                else:
                    print(f"❌ DNS {dns}: کار نمی‌کند")
                    
            except Exception as e:
                print(f"❌ DNS {dns}: خطا - {e}")
        
        return working_dns
    
    def configure_dns(self, working_dns):
        """تنظیم DNS در سیستم"""
        if not working_dns:
            print("❌ هیچ DNS سرور کاری پیدا نشد!")
            return False
        
        print(f"\n--- تنظیم DNS با {len(working_dns)} سرور ---")
        
        try:
            # بک‌آپ فایل resolv.conf
            subprocess.run(['sudo', 'cp', '/etc/resolv.conf', '/etc/resolv.conf.backup'])
            print("✅ بک‌آپ /etc/resolv.conf ایجاد شد")
            
            # ایجاد فایل جدید resolv.conf
            resolv_content = "# Generated by YouTube Downloader Setup\n"
            for dns in working_dns[:4]:  # حداکثر 4 DNS
                resolv_content += f"nameserver {dns}\n"
            
            resolv_content += """
# Options for better DNS resolution
options timeout:5
options attempts:3
options rotate
options single-request-reopen
"""
            
            # نوشتن فایل جدید
            with open('/tmp/resolv.conf.new', 'w') as f:
                f.write(resolv_content)
            
            subprocess.run(['sudo', 'mv', '/tmp/resolv.conf.new', '/etc/resolv.conf'])
            print("✅ فایل /etc/resolv.conf به‌روزرسانی شد")
            
            return True
            
        except Exception as e:
            print(f"❌ خطا در تنظیم DNS: {e}")
            return False
    
    def configure_network_settings(self):
        """تنظیم پارامترهای شبکه"""
        print("\n--- تنظیم پارامترهای شبکه ---")
        
        network_settings = {
            'net.ipv4.tcp_keepalive_time': '600',
            'net.ipv4.tcp_keepalive_intvl': '60',
            'net.ipv4.tcp_keepalive_probes': '3',
            'net.core.rmem_default': '262144',
            'net.core.rmem_max': '16777216',
            'net.core.wmem_default': '262144',
            'net.core.wmem_max': '16777216',
            'net.ipv4.tcp_rmem': '4096 65536 16777216',
            'net.ipv4.tcp_wmem': '4096 65536 16777216',
        }
        
        try:
            for setting, value in network_settings.items():
                subprocess.run(['sudo', 'sysctl', '-w', f'{setting}={value}'])
                print(f"✅ {setting} = {value}")
            
            print("✅ پارامترهای شبکه تنظیم شدند")
            return True
            
        except Exception as e:
            print(f"❌ خطا در تنظیم شبکه: {e}")
            return False
    
    def install_dependencies(self):
        """نصب وابستگی‌های مورد نیاز"""
        print("\n--- نصب وابستگی‌ها ---")
        
        packages = [
            'python3-pip',
            'python3-dev',
            'build-essential',
            'libssl-dev',
            'libffi-dev',
            'curl',
            'wget',
            'dnsutils'
        ]
        
        try:
            # به‌روزرسانی لیست پکیج‌ها
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            print("✅ لیست پکیج‌ها به‌روزرسانی شد")
            
            # نصب پکیج‌ها
            for package in packages:
                result = subprocess.run(['sudo', 'apt', 'install', '-y', package])
                if result.returncode == 0:
                    print(f"✅ {package} نصب شد")
                else:
                    print(f"⚠️ {package} نصب نشد")
            
            return True
            
        except Exception as e:
            print(f"❌ خطا در نصب وابستگی‌ها: {e}")
            return False
    
    def configure_python_environment(self):
        """تنظیم محیط پایتون"""
        print("\n--- تنظیم محیط پایتون ---")
        
        try:
            # نصب/به‌روزرسانی pip
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
            print("✅ pip به‌روزرسانی شد")
            
            # نصب پکیج‌های پایتون مورد نیاز
            python_packages = [
                'yt-dlp>=2023.12.30',
                'aiohttp>=3.9.0',
                'aiofiles>=23.0.0',
                'urllib3>=2.0.0',
                'certifi>=2023.0.0',
                'requests>=2.31.0'
            ]
            
            for package in python_packages:
                result = subprocess.run([sys.executable, '-m', 'pip', 'install', package])
                if result.returncode == 0:
                    print(f"✅ {package} نصب شد")
                else:
                    print(f"⚠️ {package} نصب نشد")
            
            return True
            
        except Exception as e:
            print(f"❌ خطا در تنظیم محیط پایتون: {e}")
            return False
    
    def create_environment_script(self):
        """ایجاد اسکریپت تنظیم محیط"""
        print("\n--- ایجاد اسکریپت محیط ---")
        
        env_script = """#!/bin/bash
# YouTube Downloader Environment Setup

# Set DNS timeout
export PYTHONHTTPSVERIFY=0
export CURL_CA_BUNDLE=""
export REQUESTS_CA_BUNDLE=""

# Network timeouts
export SOCKET_TIMEOUT=60
export CONNECT_TIMEOUT=45
export READ_TIMEOUT=120

# Python optimizations
export PYTHONUNBUFFERED=1
export PYTHONDONTWRITEBYTECODE=1

# DNS settings
export RES_OPTIONS="timeout:5 attempts:3 rotate single-request-reopen"

echo "YouTube Downloader environment configured!"
"""
        
        try:
            with open('youtube_env.sh', 'w') as f:
                f.write(env_script)
            
            os.chmod('youtube_env.sh', 0o755)
            print("✅ اسکریپت محیط ایجاد شد: youtube_env.sh")
            print("برای استفاده: source youtube_env.sh")
            
            return True
            
        except Exception as e:
            print(f"❌ خطا در ایجاد اسکریپت محیط: {e}")
            return False
    
    def run_setup(self):
        """اجرای کامل راه‌اندازی"""
        print("=" * 60)
        print("راه‌اندازی محیط سرور لینوکس برای YouTube Downloader")
        print("=" * 60)
        
        if not self.check_system():
            return False
        
        steps = [
            ("تست DNS Servers", self.test_dns_servers),
            ("نصب وابستگی‌ها", self.install_dependencies),
            ("تنظیم محیط پایتون", self.configure_python_environment),
            ("تنظیم پارامترهای شبکه", self.configure_network_settings),
            ("ایجاد اسکریپت محیط", self.create_environment_script),
        ]
        
        working_dns = None
        
        for step_name, step_func in steps:
            print(f"\n🔄 {step_name}...")
            try:
                if step_name == "تست DNS Servers":
                    working_dns = step_func()
                    if working_dns:
                        self.configure_dns(working_dns)
                else:
                    result = step_func()
                    if not result:
                        print(f"❌ {step_name} ناموفق بود")
                        
            except Exception as e:
                print(f"❌ خطا در {step_name}: {e}")
        
        print("\n" + "=" * 60)
        print("راه‌اندازی کامل شد!")
        print("=" * 60)
        print("مراحل بعدی:")
        print("1. source youtube_env.sh")
        print("2. python test_linux_server.py")
        print("3. python main.py")
        
        return True

def main():
    """تابع اصلی"""
    setup = LinuxServerSetup()
    
    try:
        success = setup.run_setup()
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n❌ راه‌اندازی لغو شد")
        return 2
    except Exception as e:
        print(f"❌ خطای غیرمنتظره: {e}")
        return 3

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)